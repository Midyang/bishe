package myTest;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.fastjson.JSON;
import com.shop.pojo.Orderitem;
import com.shop.pojo.User;
import com.shop.utils.JsonUtil;
import com.shop.utils.ValidateValue;

public class Test {

	public static void main(String[] args) {
		/*HashMap<String,Object> map = new HashMap<String,Object>();
		map.put("姓名", "测试");
		map.put("sex", "男");
		map.put("学生", new User("mi123","123456","midayang"));
		String jsonString = JSON.toJSONString(map);//对象转为字符串
		System.out.println("当前为集合转为JSON后："+jsonString);
		try {
			byte[] bytes = jsonString.getBytes("utf-8");//将字符串以utf-8 格式转为字节数组
			ArrayList<Byte> arrayList = new ArrayList<Byte>(bytes.length);
			System.out.print("当前为JSON字符串转为字节数组：");
			for (byte b : bytes) {
				System.out.print(b+" ");
				arrayList.add(b);
			}
			System.out.println("测试：");
			byte[] jsonBytes = JSON.toJSONBytes(map);
			for (byte b : jsonBytes) {
				System.out.print(b+" ");
			}
			
			System.out.println("");
			String jsonString2 = JSON.toJSONString(arrayList);
			System.out.println("当前为字节数组转换为字节集合以后："+jsonString2);
			System.err.println("    下面开始解析：");
			
			System.out.println("  开始执行 字符串转换为集合。。。");
		    List<Byte> parseArray = JSON.parseArray(jsonString2,Byte.class);
		    byte[] sss = new byte[parseArray.size()];
			System.out.println("  开始执行 集合转换为数组。。。");
			for (int i = 0; i < parseArray.size(); i++) {
				sss [i] = parseArray.get(i);
			}
			System.out.println("  开始执行 数组转换为JSON串。。。");
			String string = new String(sss,"utf-8");
			System.out.println("  开始执行 JSON串还原对象。。。"+string);
			
			Map<?, ?> parse = JSON.parseObject(string, HashMap.class);
			System.out.println("   解析成功;   开始从中获取获取值：");
			String object = (String)parse.get("姓名");
			System.out.println(object);
			
		
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		String objToByteStr = JsonUtil.objToByteStr(map);
		System.out.println("转换后的结果："+objToByteStr);
		@SuppressWarnings("unchecked")
		HashMap<String, Object> byteStrToObj = JsonUtil.byteStrToObj(objToByteStr, HashMap.class);
		System.out.println("测试结果："+byteStrToObj.get("学生").toString());
		System.out.println(ValidateValue.valiByte("[123,34,-27,-89,-109,-27,-112,-115,34,58,34,-26,-75,-117,-24,-81,-107,34,44,34,-27,-83,-90,-25,-108,-97,34,58,123,34,110,97,109,101,34,58,34,109,105,100,97,121,97,110,103,34,44,34,112,97,115,115,119,111,114,100,34,58,34,49,50,51,52,53,54,34,44,34,117,115,101,114,110,97,109,101,34,58,34,109,105,49,50,51,34,125,44,34,115,101,120,34,58,34,-25,-108,-73,34,125]"));*/
		String val = "[91,123,34,99,111,117,110,116,34,58,49,44,34,112,114,111,100,117,99,116,34,58,123,34,100,101,115,99,114,105,112,116,105,111,110,34,58,34,-28,-67,-96,-26,-104,-81,-28,-70,-116,-24,-76,-89,34,44,34,105,100,34,58,49,44,34,105,109,97,103,101,34,58,34,112,114,111,100,117,99,116,73,109,97,103,101,115,92,92,97,97,97,46,112,110,103,34,44,34,105,115,72,111,116,34,58,49,44,34,109,97,114,107,101,116,80,114,105,99,101,34,58,51,52,46,50,44,34,110,97,109,101,34,58,34,-27,-80,-113,-25,-79,-77,56,112,97,112,34,44,34,115,99,105,100,34,58,49,44,34,115,104,111,112,80,114,105,99,101,34,58,52,53,46,55,125,44,34,112,114,111,100,117,99,116,73,100,34,58,49,44,34,115,117,98,116,111,116,97,108,34,58,52,53,46,55,125,44,123,34,99,111,117,110,116,34,58,49,44,34,112,114,111,100,117,99,116,34,58,123,34,100,101,115,99,114,105,112,116,105,111,110,34,58,34,-24,-121,-77,-27,-80,-118,-27,-123,-88,-23,-103,-74,-25,-109,-73,33,34,44,34,105,100,34,58,56,44,34,105,109,97,103,101,34,58,34,105,109,97,103,101,47,-27,-80,-113,-25,-79,-77,77,73,88,50,-27,-123,-88,-23,-103,-74,-25,-109,-73,46,106,112,103,34,44,34,105,115,72,111,116,34,58,49,44,34,109,97,114,107,101,116,80,114,105,99,101,34,58,50,54,57,57,46,48,44,34,110,97,109,101,34,58,34,-27,-80,-113,-25,-79,-77,77,105,120,50,32,-27,-123,-88,-23,-103,-74,-25,-109,-73,-27,-80,-118,34,44,34,115,99,105,100,34,58,49,44,34,115,104,111,112,80,114,105,99,101,34,58,50,56,57,57,46,48,44,34,116,105,109,101,34,58,49,53,51,56,49,57,48,50,56,53,48,48,48,125,44,34,112,114,111,100,117,99,116,73,100,34,58,56,44,34,115,117,98,116,111,116,97,108,34,58,50,56,57,57,46,48,125,44,123,34,99,111,117,110,116,34,58,49,44,34,112,114,111,100,117,99,116,34,58,123,34,100,101,115,99,114,105,112,116,105,111,110,34,58,34,-27,-114,-117,-26,-124,-97,-27,-79,-113,-27,-71,-107,-26,-116,-121,-25,-70,-71,32,47,32,-27,-113,-116,-23,-94,-111,71,80,83,32,47,32,-23,-86,-127,-23,-66,-103,56,52,53,-27,-92,-124,-25,-112,-122,-27,-103,-88,34,44,34,105,100,34,58,50,44,34,105,109,97,103,101,34,58,34,105,109,97,103,101,47,-27,-80,-113,-25,-79,-77,56,-23,-99,-110,-26,-104,-91,-25,-119,-120,46,106,112,103,34,44,34,105,115,72,111,116,34,58,49,44,34,109,97,114,107,101,116,80,114,105,99,101,34,58,51,49,57,57,46,48,44,34,110,97,109,101,34,58,34,-27,-80,-113,-25,-79,-77,56,32,-27,-79,-113,-27,-71,-107,-26,-116,-121,-25,-70,-71,-25,-119,-120,34,44,34,115,99,105,100,34,58,50,44,34,115,104,111,112,80,114,105,99,101,34,58,51,50,53,54,46,48,44,34,116,105,109,101,34,58,49,53,51,56,49,56,52,53,50,50,48,48,48,125,44,34,112,114,111,100,117,99,116,73,100,34,58,50,44,34,115,117,98,116,111,116,97,108,34,58,51,50,53,54,46,48,125,44,123,34,99,111,117,110,116,34,58,49,44,34,112,114,111,100,117,99,116,34,58,123,34,100,101,115,99,114,105,112,116,105,111,110,34,58,34,-23,-86,-127,-23,-66,-103,55,49,48,-27,-92,-124,-25,-112,-122,-27,-103,-88,47,65,73,-24,-74,-123,-26,-124,-97,-27,-123,-119,-27,-113,-116,-26,-111,-124,47,53,46,56,56,92,34,-27,-123,-88,-23,-99,-94,-27,-79,-113,47,-27,-119,-115,-25,-67,-82,50,48,48,48,-28,-72,-121,-26,-97,-108,-27,-123,-119,-24,-121,-86,-26,-117,-115,47,-28,-72,-119,-26,-104,-97,32,65,77,79,76,69,68,32,-27,-79,-113,-27,-71,-107,47,51,49,50,48,109,65,104,32,-23,-107,-65,-25,-69,-83,-24,-120,-86,34,44,34,105,100,34,58,51,44,34,105,109,97,103,101,34,58,34,105,109,97,103,101,47,-25,-70,-94,-25,-79,-77,78,111,116,101,46,106,112,103,34,44,34,105,115,72,111,116,34,58,49,44,34,109,97,114,107,101,116,80,114,105,99,101,34,58,49,54,57,57,46,48,44,34,110,97,109,101,34,58,34,-27,-80,-113,-25,-79,-77,56,32,83,69,34,44,34,115,99,105,100,34,58,50,44,34,115,104,111,112,80,114,105,99,101,34,58,49,55,57,57,46,48,44,34,116,105,109,101,34,58,49,53,51,56,49,56,51,48,53,48,48,48,48,125,44,34,112,114,111,100,117,99,116,73,100,34,58,51,44,34,115,117,98,116,111,116,97,108,34,58,49,55,57,57,46,48,125,93]";
		System.out.println("长度："+val.length());
		List<Byte> parseArray = JSON.parseArray(val, Byte.class);
		System.out.println(parseArray.size());
		byte[] byt = null;
		byt = new byte[parseArray.size()];
		for (int i = 0; i < parseArray.size(); i++) {
			byt[i] = parseArray.get(i);
		}
		System.out.println(byt.length);
		try {
			String string = new String(byt,"UTF-8");
			System.out.println(string);
			List<Orderitem> parseArray2 = JSON.parseArray(string, Orderitem.class);
			System.out.println(parseArray2.size());
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
